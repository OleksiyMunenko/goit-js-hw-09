{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAGMC,GADOC,SAASC,cAAc,SACjBD,SAASC,cAAc,mBACpCC,EAAaF,SAASC,cAAc,iBACpCE,EAASH,SAASC,cAAc,mBA2BtC,SAASG,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAtCWN,SAASC,cAAc,UAE/Ba,iBAAiB,SAE3B,SAAkBC,GAChBA,EAAEC,iBAKF,IAJA,IAAMC,EAAsBC,SAASf,EAAOgB,OACtCC,EAAOF,SAAShB,EAAWiB,OAC7BE,EAAQH,SAASnB,EAAWoB,OAEvBG,EAAW,EAAGA,GAAYL,EAAqBK,GAAY,EAClElB,EAAckB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MACjB,OAAOmB,EAAA5B,GAAS6B,OAAOC,QACrB,qBAAoCC,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAG7CuB,OAAM,SAAAL,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,MAClB,OAAOmB,EAAA5B,GAAS6B,OAAOI,QACrB,oBAAmCF,OAAfvB,EAAS,QAAYuB,OAANtB,EAAM,M,IAG/Ce,GAASD,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst firstDelay = document.querySelector('[name=\"delay\"]');\nconst delayStepp = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\nconst submitBtn = document.querySelector('button');\n\nsubmitBtn.addEventListener('click', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n  const numOfCreatedPromise = parseInt(amount.value);\n  const step = parseInt(delayStepp.value);\n  let delay = parseInt(firstDelay.value);\n\n  for (let position = 1; position <= numOfCreatedPromise; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        return Notiflix.Notify.success(\n          `Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        return Notiflix.Notify.failure(\n          `Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$firstDelay","document","querySelector","$ce04d3a99e08e73b$var$delayStepp","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","numOfCreatedPromise","parseInt","value","step","delay1","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.81c12904.js.map"}