{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEAC,KAAO,CACLC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,qBACnCE,UAAWH,SAASC,cAAc,oBAClCG,YAAaJ,SAASC,cAAc,sBACpCI,UAAWL,SAASC,cAAc,WAGnC,MAAMK,EAAsBC,OAAOT,KAAKM,YAAYI,OAC9CC,EAAYF,OAAOT,KAAKK,UAAUK,OACzC,IAAIE,EAAQH,OAAOT,KAAKI,WAAWM,OAkBnC,SAASG,GAAcC,SAAEA,EAAUC,MAAAC,IACjC,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EAEFI,EAAQ,C,SAAEP,EAAUC,MAAAC,IAGpBM,EAAO,C,SAAER,EAAUC,MAAAC,GAAQ,GAE5BA,EAAM,G,CA3BbhB,KAAKO,UAAUiB,iBAAiB,UAEhC,SAAkBC,GACjBA,EAAEC,iBAEF,IAAK,IAAIC,EAAW,EAAGA,GAAYnB,EAAqBmB,GAAY,EAChEd,EAAc,CAAEC,SAAAa,E,MAAUf,IAASgB,MAAK,EAACd,SAAEA,EAAUC,MAAAc,MAClDC,EAAAhC,GAASiC,OAAOC,QAAQ,qBAAqBlB,QAAee,MAAU,IACrEI,OAAM,EAACnB,SAAEA,EAAUC,MAAAmB,MACpBJ,EAAAhC,GAASiC,OAAOI,QAAQ,oBAAoBrB,QAAeoB,MAAU,IAE3EtB,GAASD,EAETX,KAAKC,KAAKmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nrefs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=delay]'),\n  stepInput: document.querySelector('input[name=step]'),\n  amountInput: document.querySelector('input[name=amount]'),\n  submitBtn: document.querySelector('button'),\n};\n\n const numOfCreatedPromise = Number(refs.amountInput.value);\n const delayStep = Number(refs.stepInput.value);\nlet delay = Number(refs.delayInput.value);\n \nrefs.submitBtn.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n\te.preventDefault();\n\t\n\tfor (let position = 1; position <= numOfCreatedPromise; position += 1) {\n\t\t\t  createPromise({ position, delay }).then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\t\tdelay += delayStep;\t\n  }\n  refs.form.reset();\n}\n\nfunction createPromise({ position, delay }) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","refs","form","document","querySelector","delayInput","stepInput","amountInput","submitBtn","$47d4ff9957288465$var$numOfCreatedPromise","Number","value","$47d4ff9957288465$var$delayStep","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$createPromise","position","delay","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","position1","then","delay1","$parcel$interopDefault","Notify","success","catch","delay2","failure","reset"],"version":3,"file":"03-promises.729c2a80.js.map"}