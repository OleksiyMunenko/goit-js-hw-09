{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEAC,KAAO,CACLC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,qBACnCE,UAAWH,SAASC,cAAc,oBAClCG,YAAaJ,SAASC,cAAc,sBACpCI,UAAWL,SAASC,cAAc,WAGnC,IAAMK,EAAsBC,OAAOT,KAAKM,YAAYI,OAC9CC,EAAYF,OAAOT,KAAKK,UAAUK,OACrCE,EAAQH,OAAOT,KAAKI,WAAWM,OAkBnC,SAASG,EAAcC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYG,MAC3BC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EAEFI,EAAQ,CAAEP,WAAUE,MAAAD,IAGpBO,EAAO,CAAER,WAAUE,MAAAD,G,GAEpBA,E,IA3BPhB,KAAKO,UAAUkB,iBAAiB,UAEhC,SAAkBC,GACjBA,EAAEC,iBAEF,IAAK,IAAIC,EAAW,EAAGA,GAAYpB,EAAqBoB,GAAY,EAChEf,EAAc,CAAEE,SAAAa,EAAUX,MAAAL,IAASiB,MAAK,SAAAf,G,IAAGC,EAAQD,EAARC,SAAUe,EAAKhB,EAALG,MAClDc,EAAAjC,GAASkC,OAAOC,QAAQ,qBAAoCC,OAAfnB,EAAS,QAAYmB,OAANJ,EAAM,M,IACjEK,OAAM,SAAArB,G,IAAGC,EAAQD,EAARC,SAAUqB,EAAKtB,EAALG,MACpBc,EAAAjC,GAASkC,OAAOK,QAAQ,oBAAmCH,OAAfnB,EAAS,QAAYmB,OAANE,EAAM,M,IAEvExB,GAASD,EAETX,KAAKC,KAAKqC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nrefs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('input[name=delay]'),\n  stepInput: document.querySelector('input[name=step]'),\n  amountInput: document.querySelector('input[name=amount]'),\n  submitBtn: document.querySelector('button'),\n};\n\n const numOfCreatedPromise = Number(refs.amountInput.value);\n const delayStep = Number(refs.stepInput.value);\nlet delay = Number(refs.delayInput.value);\n \nrefs.submitBtn.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n\te.preventDefault();\n\t\n\tfor (let position = 1; position <= numOfCreatedPromise; position += 1) {\n\t\t\t  createPromise({ position, delay }).then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      }).catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n\t\tdelay += delayStep;\t\n  }\n  refs.form.reset();\n}\n\nfunction createPromise({ position, delay }) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","refs","form","document","querySelector","delayInput","stepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$numOfCreatedPromise","Number","value","$ce04d3a99e08e73b$var$delayStep","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$createPromise","param","position","delay3","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","position1","then","delay1","$parcel$interopDefault","Notify","success","concat","catch","delay2","failure","reset"],"version":3,"file":"03-promises.dcc9993c.js.map"}